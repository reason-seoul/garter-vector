// Generated by ReScript, PLEASE EDIT WITH CARE

import * as HashSet from "rescript-hashmap/src/HashSet.js";
import * as Immutable from "immutable";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Belt_SetInt from "@rescript/std/lib/es6/belt_SetInt.js";

var ar = Belt_Array.range(1, 100);

var setup = "let n = " + 100 + "\nA.range(1, n)";

var benchmarks = [
  {
    name: "HashSet.set",
    code: "let s = HashSet.make(~hasher=x => x)\nA.shuffleInPlace(ar)\nA.reduce(ar, s, (s, x) => HashSet.set(s, x))",
    f: (function () {
        var s = HashSet.make(function (x) {
              return x;
            });
        Belt_Array.shuffleInPlace(ar);
        return Belt_Array.reduce(ar, s, HashSet.set);
      })
  },
  {
    name: "Belt.Set.Int.add",
    code: "let s = Belt.Set.Int.empty\nA.shuffleInPlace(ar)\nA.reduce(ar, s, (s, x) => Belt.Set.Int.add(s, x))",
    f: (function () {
        Belt_Array.shuffleInPlace(ar);
        return Belt_Array.reduce(ar, undefined, Belt_SetInt.add);
      })
  },
  {
    name: "ImmutableJs.Set.add",
    code: "let s = ImmutableJs.Set.make()\nA.shuffleInPlace(ar)\nA.reduce(ar, s, (s, x) => ImmutableJs.Set.add(s, x))",
    f: (function () {
        var s = new Immutable.Set();
        Belt_Array.shuffleInPlace(ar);
        return Belt_Array.reduce(ar, s, (function (s, x) {
                      return s.add(x);
                    }));
      })
  }
];

var suite_name = "Insert";

var suite = {
  name: suite_name,
  setup: setup,
  benchmarks: benchmarks
};

var Insert = {
  n: 100,
  ar: ar,
  setup: setup,
  benchmarks: benchmarks,
  suite: suite
};

function map(x) {
  return {
          suite: suite,
          url: "create"
        };
}

function fromUrl(x) {
  if (x === "create") {
    return /* Create */0;
  }
  
}

var routes = [/* Create */0];

var Routes = {
  map: map,
  fromUrl: fromUrl,
  routes: routes
};

var A;

var S;

export {
  A ,
  S ,
  Insert ,
  Routes ,
  
}
/* ar Not a pure module */
