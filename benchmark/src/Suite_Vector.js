// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Mori from "mori";
import * as Vector from "rescript-vector/src/Vector.js";
import * as Immutable from "immutable";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as ImmutableJs$Benchmark from "./bindings/ImmutableJs.js";

var benchmarks = [
  {
    name: "Vector.fromArray",
    code: "A.range(1, n)->Vector.fromArray",
    f: (function () {
        return Vector.fromArray(Belt_Array.range(1, 1000));
      })
  },
  {
    name: "ImmutableJs.List.fromArray",
    code: "A.range(1, n)->ImmutableJs.List.fromArray",
    f: (function () {
        return Immutable.List(Belt_Array.range(1, 1000));
      })
  },
  {
    name: "Mori.into",
    code: "A.range(1, n) |> Mori.into(Mori.vector())",
    f: (function () {
        return Mori.into(Mori.vector(), Belt_Array.range(1, 1000));
      })
  }
];

var suite_name = "Creation";

var suite = {
  name: suite_name,
  setup: "",
  benchmarks: benchmarks
};

var Create = {
  n: 1000,
  benchmarks: benchmarks,
  suite: suite
};

function vectorCase(n) {
  return {
          name: "Vector.push",
          code: "A.range(1, n)\n->A.reduce(Vector.make(), (v, i) => Vector.push(v, i))",
          f: (function () {
              return Belt_Array.reduce(Belt_Array.range(1, n), Vector.make(undefined), Vector.push);
            })
        };
}

function immutableJsCase(n) {
  return {
          name: "ImmutableJs.List.push",
          code: "A.range(1, n)\n->A.reduce(ImmutableJs.List.fromArray([||]), (l, i) => ImmutableJs.List.push(l, i))",
          f: (function () {
              return Belt_Array.reduce(Belt_Array.range(1, n), Immutable.List([]), (function (l, i) {
                            return l.push(i);
                          }));
            })
        };
}

function moriCase(n) {
  return {
          name: "mori.conj",
          code: "A.range(1, n)\n->A.reduce(Mori.vector(), (v, i) => Mori.conj(v, i))",
          f: (function () {
              return Belt_Array.reduce(Belt_Array.range(1, n), Mori.vector(), (function (v, i) {
                            return Mori.conj(v, i);
                          }));
            })
        };
}

var smallSuite_name = "Append last (n=" + 1000 + ")";

var smallSuite_setup = "let n = " + 1000 + ";";

var smallSuite_benchmarks = [
  vectorCase(1000),
  immutableJsCase(1000),
  moriCase(1000)
];

var smallSuite = {
  name: smallSuite_name,
  setup: smallSuite_setup,
  benchmarks: smallSuite_benchmarks
};

var largeSuite_name = "Append last (n=" + 100000 + ")";

var largeSuite_setup = "let n = " + 100000 + ";";

var largeSuite_benchmarks = [
  vectorCase(100000),
  immutableJsCase(100000),
  moriCase(100000)
];

var largeSuite = {
  name: largeSuite_name,
  setup: largeSuite_setup,
  benchmarks: largeSuite_benchmarks
};

var Push = {
  smallN: 1000,
  largeN: 100000,
  vectorCase: vectorCase,
  immutableJsCase: immutableJsCase,
  moriCase: moriCase,
  smallSuite: smallSuite,
  largeSuite: largeSuite
};

var v0 = Belt_Array.makeBy(100, (function (param) {
        return Vector.makeBy(100, (function (i) {
                      return i;
                    }));
      }));

var l0 = Belt_Array.makeBy(100, (function (param) {
        return Immutable.List(Belt_Array.makeBy(100, (function (i) {
                          return i;
                        })));
      }));

var a0 = Belt_Array.makeBy(100, (function (param) {
        return Belt_Array.makeBy(100, (function (i) {
                      return i;
                    }));
      }));

var setup = "let n = " + 100 + "\nlet v0 = A.makeBy(n, V.makeBy(n, i => i))\nlet l0 = A.makeBy(n, _ => L.fromArray(A.makeBy(n, i => i)))";

var benchmarks$1 = [
  {
    name: "Vector.concatMany",
    code: "V.concatMany(v0)",
    f: (function () {
        return Vector.concatMany(v0);
      })
  },
  {
    name: "ImmutableJs.concat",
    code: "L.concatMany(l0)",
    f: (function () {
        return ImmutableJs$Benchmark.List.concatMany(l0);
      })
  }
];

var suite$1 = {
  name: "Concat",
  setup: setup,
  benchmarks: benchmarks$1
};

var Concat = {
  n: 100,
  v0: v0,
  l0: l0,
  a0: a0,
  setup: setup,
  benchmarks: benchmarks$1,
  suite: suite$1
};

var v0$1 = Belt_Array.range(1, 10000);

var v1 = Vector.fromArray(Belt_Array.range(1, 10000));

var v2 = Immutable.List(Belt_Array.range(1, 10000));

var v3 = Mori.into(Mori.vector(), Belt_Array.range(1, 10000));

var setup$1 = "let n = 10000;\nlet v0 = A.range(1, n);\nlet v1 = Vector.fromArray(A.range(1, n));\nlet v2 = ImmutableJs.List.fromArray(A.range(1, n));\nlet v3 = Mori.into(Mori.vector(), A.range(1, n));";

var Fixture = {
  n: 10000,
  v0: v0$1,
  v1: v1,
  v2: v2,
  v3: v3,
  setup: setup$1
};

var indices = Belt_Array.shuffle(Belt_Array.range(0, 9999));

var setup$2 = setup$1 + "\nlet indices = A.range(0, n - 1)->A.shuffle;";

var accessSuite_name = "Random Access";

var accessSuite_benchmarks = [
  {
    name: "Vector.getExn",
    code: "indices->A.forEach(i => Vector.get(v1, i)->ignore)",
    f: (function () {
        return Belt_Array.forEach(indices, (function (i) {
                      Vector.getExn(v1, i);
                      
                    }));
      })
  },
  {
    name: "ImmutableJs.List.get",
    code: "indices->A.forEach(i => ImmutableJs.List.get(v2, i)->ignore)",
    f: (function () {
        return Belt_Array.forEach(indices, (function (i) {
                      v2.get(i);
                      
                    }));
      })
  },
  {
    name: "Mori.nth",
    code: "indices->A.forEach(i => Mori.nth(v3, i)->ignore)",
    f: (function () {
        return Belt_Array.forEach(indices, (function (i) {
                      Mori.nth(v3, i);
                      
                    }));
      })
  }
];

var accessSuite = {
  name: accessSuite_name,
  setup: setup$2,
  benchmarks: accessSuite_benchmarks
};

var updateSuite_name = "Random Update";

var updateSuite_benchmarks = [
  {
    name: "Vector.setExn",
    code: "indices->A.reduce(v1, (v, i) => Vector.setExn(v, i, -1))",
    f: (function () {
        return Belt_Array.reduce(indices, v1, (function (v, i) {
                      return Vector.setExn(v, i, -1);
                    }));
      })
  },
  {
    name: "ImmutableJs.List.set",
    code: "indices\n->A.reduce(v2, (v, i) => ImmutableJs.List.set(v, i, -1))",
    f: (function () {
        return Belt_Array.reduce(indices, v2, (function (v, i) {
                      return v.set(i, -1);
                    }));
      })
  },
  {
    name: "Mori.assoc",
    code: "indices->A.reduce(v3, (v, i) => Mori.assoc(v, i, -1))",
    f: (function () {
        return Belt_Array.reduce(indices, v3, (function (v, i) {
                      return Mori.assoc(v, i, -1);
                    }));
      })
  }
];

var updateSuite = {
  name: updateSuite_name,
  setup: setup$2,
  benchmarks: updateSuite_benchmarks
};

var AccessUpdate = {
  indices: indices,
  setup: setup$2,
  accessSuite: accessSuite,
  updateSuite: updateSuite
};

var suite_name$1 = "Reduce";

var suite_benchmarks = [
  {
    name: "Vector.reduce",
    code: "v1->Vector.reduce(0, (+))",
    f: (function () {
        return Vector.reduce(v1, 0, (function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }));
      })
  },
  {
    name: "ImmutableJs.List.reduce",
    code: "v2->ImmutableJs.List.reduce((+), 0)",
    f: (function () {
        return v2.reduce((function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }), 0);
      })
  },
  {
    name: "Mori.reduce",
    code: "v3->Mori.reduce((+), 0, _)",
    f: (function () {
        return Mori.reduce((function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }), 0, v3);
      })
  }
];

var suite$2 = {
  name: suite_name$1,
  setup: setup$1,
  benchmarks: suite_benchmarks
};

var suite2_name = "Reduce (vs. mutable)";

var suite2_benchmarks = [
  {
    name: "Js.Array2.reduce (built-in)",
    code: "v0->Js.Array2.reduce((+), 0)",
    f: (function () {
        return v0$1.reduce((function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }), 0);
      })
  },
  {
    name: "Belt.Array.reduce",
    code: "v0->Belt.Array.reduce(0, (+))",
    f: (function () {
        return Belt_Array.reduce(v0$1, 0, (function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }));
      })
  },
  {
    name: "Vector.reduce",
    code: "v1->Vector.reduce(0, (+))",
    f: (function () {
        return Vector.reduce(v1, 0, (function (prim0, prim1) {
                      return prim0 + prim1 | 0;
                    }));
      })
  }
];

var suite2 = {
  name: suite2_name,
  setup: setup$1,
  benchmarks: suite2_benchmarks
};

var Reduce = {
  setup: setup$1,
  suite: suite$2,
  suite2: suite2
};

function map(x) {
  switch (x) {
    case /* Create */0 :
        return {
                suite: suite,
                url: "create"
              };
    case /* PushSmall */1 :
        return {
                suite: smallSuite,
                url: "append-last-small"
              };
    case /* PushLarge */2 :
        return {
                suite: largeSuite,
                url: "append-last-large"
              };
    case /* Concat */3 :
        return {
                suite: suite$1,
                url: "concat"
              };
    case /* RandomAccess */4 :
        return {
                suite: accessSuite,
                url: "random-access"
              };
    case /* RandomUpdate */5 :
        return {
                suite: updateSuite,
                url: "random-update"
              };
    case /* Reduce */6 :
        return {
                suite: suite$2,
                url: "reduce"
              };
    case /* ReduceMutable */7 :
        return {
                suite: suite2,
                url: "reduce-mutable"
              };
    
  }
}

function fromUrl(x) {
  switch (x) {
    case "append-last-large" :
        return /* PushLarge */2;
    case "append-last-small" :
        return /* PushSmall */1;
    case "concat" :
        return /* Concat */3;
    case "create" :
        return /* Create */0;
    case "random-access" :
        return /* RandomAccess */4;
    case "random-update" :
        return /* RandomUpdate */5;
    case "reduce" :
        return /* Reduce */6;
    case "reduce-mutable" :
        return /* ReduceMutable */7;
    default:
      return ;
  }
}

var routes = [
  /* Create */0,
  /* PushSmall */1,
  /* PushLarge */2,
  /* Concat */3,
  /* RandomAccess */4,
  /* RandomUpdate */5,
  /* Reduce */6,
  /* ReduceMutable */7
];

var Routes = {
  map: map,
  fromUrl: fromUrl,
  routes: routes
};

var A;

var V;

var L;

export {
  A ,
  V ,
  L ,
  Create ,
  Push ,
  Concat ,
  Fixture ,
  AccessUpdate ,
  Reduce ,
  Routes ,
  
}
/* smallSuite Not a pure module */
