// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_math from "@rescript/std/lib/es6/js_math.js";
import * as Belt_Array from "@rescript/std/lib/es6/belt_Array.js";
import * as Belt_Option from "@rescript/std/lib/es6/belt_Option.js";
import * as Belt_SetInt from "@rescript/std/lib/es6/belt_SetInt.js";
import * as HashSet_Int from "../src/HashSet_Int.js";

var actions = Belt_Array.makeBy(10000, (function (param) {
        var x = Js_math.random_int(0, 5000);
        var match = Js_math.random_int(0, 2);
        if (match !== 0) {
          return {
                  TAG: /* Remove */1,
                  _0: x
                };
        } else {
          return {
                  TAG: /* Insert */0,
                  _0: x
                };
        }
      }));

var init = [
  HashSet_Int.empty,
  undefined
];

Belt_Array.reduce(actions, init, (function (param, action) {
        var s2 = param[1];
        var s1 = param[0];
        if (action.TAG === /* Insert */0) {
          var x = action._0;
          var len = Belt_SetInt.size(s2) + (
            Belt_Option.isNone(Belt_SetInt.get(s2, x)) ? 1 : 0
          ) | 0;
          var s1$1 = HashSet_Int.set(s1, x);
          var s2$1 = Belt_SetInt.add(s2, x);
          if (HashSet_Int.size(s1$1) !== len) {
            throw {
                  RE_EXN_ID: "Assert_failure",
                  _1: [
                    "hashset_test.res",
                    27,
                    4
                  ],
                  Error: new Error()
                };
          }
          return [
                  s1$1,
                  s2$1
                ];
        }
        var x$1 = action._0;
        var len$1 = Belt_SetInt.size(s2) - (
          Belt_Option.isSome(Belt_SetInt.get(s2, x$1)) ? 1 : 0
        ) | 0;
        var s1$2 = HashSet_Int.remove(s1, x$1);
        var s2$2 = Belt_SetInt.remove(s2, x$1);
        if (HashSet_Int.size(s1$2) !== len$1) {
          throw {
                RE_EXN_ID: "Assert_failure",
                _1: [
                  "hashset_test.res",
                  38,
                  4
                ],
                Error: new Error()
              };
        }
        return [
                s1$2,
                s2$2
              ];
      }));

var n = 10000;

export {
  n ,
  actions ,
  init ,
  
}
/* actions Not a pure module */
