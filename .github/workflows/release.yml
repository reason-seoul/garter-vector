name: Release

on:
  push:
    branches:
      - main

jobs:
  build_linux:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./packages/vector/ppx_vector
    strategy:
      matrix:
        os: [ubuntu-18.04]
        ocaml-compiler:
          - 4.12.1

    steps:
      - uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-compiler}}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Install deps
        run: opam install . --deps-only --with-test

      - name: Build
        run: opam exec -- dune build

      - name: Copy built PPX file
        run: |
          mv ./_build/default/bin/bin.exe ppx.exe

      - name: (only on release) Upload artifacts ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: ./packages/vector/ppx_vector/ppx.exe
          if-no-files-found: error

  build_macos:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./packages/vector/ppx_vector
    strategy:
      matrix:
        os: [macOS-latest]
        ocaml-compiler:
          - 4.12.1

    steps:
      - uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-compiler}}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}

      - name: Install deps
        run: opam install . --deps-only --with-test

      - name: Build
        run: opam exec -- dune build

      - name: Copy built PPX file
        run: |
          mv ./_build/default/bin/bin.exe ppx.exe
      
      - name: ls
        run: |
          echo $(ls)

      - name: (only on release) Upload artifacts ${{ matrix.os }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: ./packages/vector/ppx_vector/ppx.exe
          if-no-files-found: error

  release:
    needs: [build_linux, build_macos]
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js v18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Download linux artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-18.04
          path: binaries/linux

      - name: Download macOS artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-latest
          path: binaries/darwin

      - name: Move artifacts
        if: success()
        run: |
          mkdir -p bin
          mv binaries/linux/ppx.exe ./packages/vector/ppx-linux.exe
          mv binaries/darwin/ppx.exe ./packages/vector/ppx-osx.exe

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Create Release Pull Request
        uses: cometkim/yarn-changeset-action@v1
        with:
          autoPublish: true
          dedupe: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
